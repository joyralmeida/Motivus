name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v2

      # Configuração do Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.20.2'

      # Atualizar npm para uma versão compatível
      - name: Update npm
        run: npm install -g npm@8

      - name: Checar Versao
        run: npm version

      # Limpar o cache do npm
      - name: Clean npm cache
        run: npm cache clean --force

      # # Configurar um registro alternativo (opcional)
      # - name: Configure npm registry
      #   run: npm config set registry https://registry.npmmirror.com

      # Cache de dependências do npm
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: 
            ${{ runner.os }}-node-

      # Instalar dependências
      - name: Install dependencies
        run: npm run clean && npm install

      # Exibir logs detalhados (em caso de erro)
      - name: Display npm error log
        if: failure()
        run: cat /home/runner/.npm/_logs/*.log

      # 8. Executar testes
      - name: Run tests
        run: npm test

      # 9. Construir a aplicação
      - name: Build application
        run: npm run build

      # 10. Criar uma release no GitHub
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Release automática da aplicação.
          draft: false

      # 11. Fazer upload do artefato para a release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/bundle.js
          asset_name: bundle.js
          asset_content_type: application/javascript

      # 12. Notificar falhas no pipeline
      - name: Send email notification on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const output = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            let job_error_message = '';
            output.data.jobs.forEach((job) => {
              if (job.conclusion === 'failure') {
                job_error_message += `Job ${job.name} failed. See log at ${job.html_url}.\n`;
              }
            });

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `CI Failed on this run. See logs:\n${job_error_message}`,
            });

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: test
      url: http://example.com # URL do ambiente de teste
    steps:
      # 13. Fazer o deploy para o ambiente de teste
      - name: Deploy to test environment
        run: echo "Deploying to test environment..."

      # 14. Notificar falhas no deploy
      - name: Send email notification on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const output = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            let job_error_message = '';
            output.data.jobs.forEach((job) => {
              if (job.conclusion === 'failure') {
                job_error_message += `Job ${job.name} failed. See log at ${job.html_url}.\n`;
              }
            });

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `CI Failed on this run. See logs:\n${job_error_message}`,
            });
